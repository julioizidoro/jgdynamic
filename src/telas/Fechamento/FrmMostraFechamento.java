/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmMostraFechamento.java
 *
 * Created on 02/08/2011, 13:52:23
 */
package telas.Fechamento;


import Regras.ConfiguracaoController;
import Regras.ContasReceberController;
import Regras.ControleChequeController;
import Regras.FormaPagamentoController;
import Regras.UsuariosController;
import controler.UsuarioLogado;
import facade.FechaCaixaFacade;
import facade.FormaPagamentoFacade;
import facade.MovimentoCaixaFacade;
import facade.PlanoContaFacade;
import facade.RetiradaFacade;
import facade.VendaFacade;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import model.*;

/**
 *
 * @author Wolverine
 */
public final class FrmMostraFechamento extends javax.swing.JFrame {
    
    private RetiradasTableModel retiradaModel;
    private FechamentoTableModel vendasModel;
    private FechamentoTableModel contasModel;
    private FechamentoTableModel deducoesModel;
    private FechamentoTableModel situacaoModel;
    
    private List<SituacaoFechamento> listaVendas;
    private List<SituacaoFechamento> listaContas;
    private List<SituacaoFechamento> listaDeducoes;
    private List<SituacaoFechamento> listaSituacao;
    private List<Retirada> listaRetirada;
    
    private Fechacaixa fechaCaixa;
    
    private float totalVendas;
    
    private float totalDevoucao;
    private float totalDesconto;
    private float totalAcrescimo;
    private float totalContas;
    private UsuarioLogado usuarioLogado;
    private double valorTotalCheques;
    
    List<Formapagamento> listaFormaVenda;
    List<Formapagamento> listaFormaConta;
    List<Formapagamento> listaCieloVendas;
    List<Formapagamento> listaRedCardVendas;
    List<Formapagamento> listaCieloContas;
    List<Formapagamento> listaRedCardContas;
    private int contaCartao;
    

    /** Creates new form FrmMostraFechamento */
    public FrmMostraFechamento(Fechacaixa fechaCaixa, UsuarioLogado usuarioLogado) {
        this.listaVendas = new ArrayList<SituacaoFechamento>();
        this.listaContas = new ArrayList<SituacaoFechamento>();
        this.listaDeducoes = new ArrayList<SituacaoFechamento>();
        this.listaSituacao = new ArrayList<SituacaoFechamento>();
        this.listaFormaVenda = new ArrayList<Formapagamento>();
        this.listaFormaConta = new ArrayList<Formapagamento>();
        this.listaRetirada =  new ArrayList<Retirada>();
        this.totalAcrescimo=0;
        this.totalContas=0;
        this.valorTotalCheques =0;
        this.totalDesconto=0;
        this.usuarioLogado = usuarioLogado;
        
        this.totalVendas=0;
        this.fechaCaixa = fechaCaixa;
        this.totalDevoucao=this.fechaCaixa.getCreditoDevolucao().floatValue();
        initComponents();
       URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        try{
            UIManager.setLookAndFeel("com.birosoft.liquid.LiquidLookAndFeel");
        }catch (Exception e){
        }
        carregarConfiguracaoContaCartao();
        gerarDadosFechamento();
        this.setVisible(true);
        verificarCheques();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        retiradajTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deducaojTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vendasjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        situacaojTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        contasjTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fechamento de Caixa");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        retiradajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Valor Dinheiro", "Valor Cheque", "Valor Cheque Pré", "Total", "Conta", "Histórico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        retiradajTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retiradajTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(retiradajTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        deducaojTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(deducaojTable);
        deducaojTable.getColumnModel().getColumn(0).setResizable(false);
        deducaojTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        deducaojTable.getColumnModel().getColumn(1).setResizable(false);
        deducaojTable.getColumnModel().getColumn(1).setPreferredWidth(20);

        jLabel1.setText("Fechamento Vendas a Vista");

        vendasjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(vendasjTable);
        vendasjTable.getColumnModel().getColumn(0).setResizable(false);
        vendasjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        vendasjTable.getColumnModel().getColumn(1).setResizable(false);
        vendasjTable.getColumnModel().getColumn(1).setPreferredWidth(20);

        jLabel2.setText("Deduções e Acrescimos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        situacaojTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(situacaojTable);
        situacaojTable.getColumnModel().getColumn(0).setResizable(false);
        situacaojTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        situacaojTable.getColumnModel().getColumn(1).setResizable(false);
        situacaojTable.getColumnModel().getColumn(1).setPreferredWidth(20);

        jLabel3.setText("Fechamento das Contas Recebidas");

        contasjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(contasjTable);
        contasjTable.getColumnModel().getColumn(0).setResizable(false);
        contasjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        contasjTable.getColumnModel().getColumn(1).setResizable(false);
        contasjTable.getColumnModel().getColumn(1).setPreferredWidth(20);

        jLabel4.setText("Situação Final do Fechamento");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Menu");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem1.setText("Finalizar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setText("Conferir Cartões");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void retiradajTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retiradajTableMouseClicked
     
}//GEN-LAST:event_retiradajTableMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       boolean resultado = JOptionPane.showConfirmDialog(null, "Confirma Fechamento do Caixa?", "Atenção", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0;
       if (resultado){
           finalizarFechamentoCaixa();
           this.dispose();
       }else {
           this.dispose();
       }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        gerarMostrarCartoes();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable contasjTable;
    private javax.swing.JTable deducaojTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable retiradajTable;
    private javax.swing.JTable situacaojTable;
    private javax.swing.JTable vendasjTable;
    // End of variables declaration//GEN-END:variables

    private void gerarListaSituacaoVendas() {
        Float valorTotal = 0.0f;

        FormaPagamentoFacade formaPagamentoFacade = new FormaPagamentoFacade();
        try {
            listaFormaVenda = formaPagamentoFacade.getFormaPagamento();
        } catch (SQLException ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
        }
        VendaFacade vendaFacade = new VendaFacade();
        for (int i = 0; i < listaFormaVenda.size(); i++) {
            float valor = 0f;
            if (listaFormaVenda.get(i).getIdformaPagamento() == contaCartao) {
                valor = valor + carregarListaCieloVendas();
                valor = valor + carregarListaRedCardVendas();
            } else {
                try {
                    valor = vendaFacade.valorFormaPagamento(listaFormaVenda.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa());
                } catch (SQLException ex) {
                    Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            listaFormaVenda.get(i).setValor(valor);
        }

        SituacaoFechamento situacao;
        for (int i = 0; i < listaFormaVenda.size(); i++) {
             if ((listaFormaVenda.get(i).getIdformaPagamento() != 8) && (listaFormaVenda.get(i).getIdformaPagamento() != 9)) {
                situacao = new SituacaoFechamento();
                situacao.setDescricao(listaFormaVenda.get(i).getDescricao());
                situacao.setValor(listaFormaVenda.get(i).getValor());
                this.listaVendas.add(situacao);
                valorTotal = valorTotal + listaFormaVenda.get(i).getValor();
                if (listaFormaVenda.get(i).getLocalRegistro().equalsIgnoreCase("Caixa")) {
                    totalVendas = totalVendas + listaFormaVenda.get(i).getValor();
                }
            }
        }
      
        situacao= new SituacaoFechamento();
        situacao.setDescricao("Total dos Valores");
        situacao.setValor(valorTotal);
        listaVendas.add(situacao);
    }
    
    private void gerarListaSituacaoContasReceber() {
        Float valorTotal = 0.0f;
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaFormaConta = formaPagamentoController.getFormaPagamento();
        ContasReceberController contasReceberController = new ContasReceberController();
        for (int i = 0; i < listaFormaConta.size(); i++) {
            float valor = 0f;
            if (listaFormaConta.get(i).getIdformaPagamento() == contaCartao) {
                valor = valor + carregarListaCieloContas();
                valor = valor + carregarListaRedCardContas();
            } else {
                    valor = contasReceberController.valorFormaPagamento(listaFormaConta.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa(), this.fechaCaixa.getEmpresa());
            }
            listaFormaConta.get(i).setValor(valor);
        }

        SituacaoFechamento situacao;
        for (int i = 0; i < listaFormaConta.size(); i++) {
            situacao = new SituacaoFechamento();
            situacao.setDescricao(listaFormaConta.get(i).getDescricao());
            situacao.setValor(listaFormaConta.get(i).getValor());
            this.listaContas.add(situacao);
            valorTotal = valorTotal + listaFormaConta.get(i).getValor();
            if (listaFormaConta.get(i).getLocalRegistro().equalsIgnoreCase("Caixa")) {
                totalContas = totalContas + listaFormaConta.get(i).getValor();
            }
        }
      
        situacao= new SituacaoFechamento();
        situacao.setDescricao("Total dos Valores");
        situacao.setValor(valorTotal);
        listaContas.add(situacao);
    }
    
//    public void gerarListaContas(){
//        totalContas = 0;
//        float valorTotal = 0f;
//        SituacaoFechamento situacao = new SituacaoFechamento();
//        situacao.setDescricao("Dinheiro");
//        Double valorRec = gerarValorRecebimentoConta("Dinheiro");
//        Float valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        listaContas.add(situacao);
//        valorTotal = valorTotal + valor;
//        totalContas = totalContas + valor;
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("Cheque");
//        valorRec = gerarValorRecebimentoConta("Cheque");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotalCheques = valorTotalCheques + valor;
//        listaContas.add(situacao);
//        valorTotal = valorTotal + valor;
//        totalContas = totalContas + valor;
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("Cheque Pre");
//        valorRec = gerarValorRecebimentoConta("Cheque Pre");
//        valor = valorRec.floatValue();
//        valorTotalCheques = valorTotalCheques + valor;
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        totalContas = totalContas + valor;
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("Cielo Debito");
//        valorRec = gerarValorRecebimentoConta("Cielo Debito");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("Cielo Crédito");
//        valorRec = gerarValorRecebimentoConta("Cielo Credito");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("RedCard Debito");
//        valorRec = gerarValorRecebimentoConta("RedCard Debito");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("RedCard Crédito");
//        valorRec = gerarValorRecebimentoConta("RedCard Credito");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("SICOB");
//        valorRec = gerarValorRecebimentoConta("Sicob");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao = new SituacaoFechamento();
//        situacao.setDescricao("Crédito Cliente");
//        valorRec = gerarValorRecebimentoConta("Credito Cliente");
//        valor = valorRec.floatValue();
//        situacao.setValor(valor);
//        valorTotal = valorTotal + valor;
//        listaContas.add(situacao); 
//        
//        situacao= new SituacaoFechamento();
//        situacao.setDescricao("Total dos Valores");
//        situacao.setValor(valorTotal);
//        listaContas.add(situacao);
//        
//        
//    }
    
    public double gerarValorRecebimentoConta(String formaPagamento){
        ContasReceberController contasReceberController = new ContasReceberController();
        double valor = 0;
        List<Contasreceberpagamento> listaContasReceberPagamento = contasReceberController.consultarContasReceberPagamento(this.fechaCaixa.getIdfechaCaixa());
        if (listaContasReceberPagamento!=null){
            for (int i=0;i<listaContasReceberPagamento.size();i++){
                valor = valor + gerarValorFormaRecebimento(formaPagamento, listaContasReceberPagamento.get(i).getIdcontasReceberPagamento());
            }
        }
        return valor;
    }
    
    public double gerarValorFormaRecebimento(String forma, int idContasReceberPagamento){
        ContasReceberController contasReceberController = new ContasReceberController();
        List<Contasreceberforma> listaContasReceberForma = contasReceberController.consultarFormaPagamento(idContasReceberPagamento, forma);
        double valor =0;
        if (listaContasReceberForma!=null){
            for (int i=0;i<listaContasReceberForma.size();i++){
                valor = valor + listaContasReceberForma.get(i).getValorPago();
            }
        }
        return valor;
    }
    
    
    public void gerarListaDeducoes(){
        SituacaoFechamento situacao = new SituacaoFechamento();
        situacao.setDescricao("Crédito Devoluções");
        situacao.setValor(totalDevoucao);
        listaDeducoes.add(situacao);
        
        VendaFacade vendaFacade = new VendaFacade();
        List<Venda> listaVenda = new ArrayList<Venda>();
        try {
            listaVenda = vendaFacade.ListarVenda(this.fechaCaixa.getIdfechaCaixa());
        } catch (Exception ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro consultar Vendas");
        }
        float valorAcrescimo =0;
        float valorDesconto=0;
        if (listaVenda!=null){
            for(int i=0;i<listaVenda.size();i++){
                valorDesconto = valorDesconto + listaVenda.get(i).getValorDesconto();
                valorAcrescimo = valorAcrescimo + listaVenda.get(i).getValorAcrescimo();
            }
        }
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Descontos");
        situacao.setValor(valorDesconto);
        listaDeducoes.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Acrescimos");
        situacao.setValor(valorAcrescimo);
        listaDeducoes.add(situacao);
        
        totalDesconto = valorDesconto;
        totalAcrescimo = valorAcrescimo;
        
      
    }
    
    public void gerarSituacaoFechamento(){
        SituacaoFechamento situacao = new SituacaoFechamento();
        situacao.setDescricao("Valores Recebidos");
        situacao.setValor(totalVendas + totalContas + totalAcrescimo);
        listaSituacao.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Retiradas");
        situacao.setValor(somarRetirada());
        listaSituacao.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Deduções");
        situacao.setValor(totalDevoucao + totalDesconto);
        listaSituacao.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Saldo de Abertura");
        situacao.setValor(this.fechaCaixa.getValorAbertura());
        listaSituacao.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Saldo de Fechamento");
        situacao.setValor(this.fechaCaixa.getValorFechamento());
        listaSituacao.add(situacao);
        
        situacao = new SituacaoFechamento();
        situacao.setDescricao("Retirada Final");
        situacao.setValor(somarRetirada());
        float valorFinal = 0;
        valorFinal = totalVendas + totalContas + totalAcrescimo;
        valorFinal = valorFinal - somarRetirada();
        valorFinal = valorFinal - (totalDevoucao);
        valorFinal = valorFinal + this.fechaCaixa.getValorAbertura();
        valorFinal = valorFinal - this.fechaCaixa.getValorFechamento();
        situacao.setValor(valorFinal);
        listaSituacao.add(situacao);     
    }
    
    public void gerarListaRetirada(){
        listaRetirada = new ArrayList<Retirada>();
        RetiradaFacade retiradaFacade = new RetiradaFacade();
        try {
            listaRetirada = retiradaFacade.listarRetiradas(fechaCaixa);
        } catch (SQLException ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public Float somarRetirada(){
        if (this.listaRetirada.size()>0){
            Float total =0f;
            for (int i=0;i<this.listaRetirada.size();i++){
                total = total + this.listaRetirada.get(i).getValorCheque().floatValue() + this.listaRetirada.get(i).getValorChequePre().floatValue() + this.listaRetirada.get(i).getValorDinheiro().floatValue();
            }
            return total;
        }else return 0f;
    }
    
    public void gerarJTableRetira(){
       DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        retiradaModel = new RetiradasTableModel(listaRetirada);
        retiradajTable.setModel(retiradaModel);
        retiradajTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
        retiradajTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        retiradajTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        retiradajTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        retiradajTable.getColumnModel().getColumn(2).setCellRenderer(renderer);
        retiradajTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        retiradajTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
        retiradajTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        retiradajTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        retiradajTable.getColumnModel().getColumn(5).setPreferredWidth(300);
        retiradajTable.repaint();
    }
    
    public void gerarJTableVendas(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        vendasModel = new FechamentoTableModel(listaVendas);
        vendasjTable.setModel(vendasModel);
        vendasjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        vendasjTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        vendasjTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        vendasjTable.repaint();
    }
    
    public void gerarJTableContas(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        contasModel = new FechamentoTableModel(listaContas);
        contasjTable.setModel(contasModel);
        contasjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        contasjTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        contasjTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        contasjTable.repaint();
    }
    
    public void gerarJTableDeducoes(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        deducoesModel = new FechamentoTableModel(listaDeducoes);
        deducaojTable.setModel(deducoesModel);
        deducaojTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        deducaojTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        deducaojTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        deducaojTable.repaint();
    }
    
    public void gerarJTableSituacao(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);  
        situacaoModel = new FechamentoTableModel(listaSituacao);
        situacaojTable.setModel(situacaoModel);
        situacaojTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        situacaojTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        situacaojTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        situacaojTable.repaint();
    }
    
    public void gerarDadosFechamento(){
        gerarListaSituacaoVendas();
        gerarListaSituacaoContasReceber();
        gerarListaDeducoes();
        gerarListaRetirada();
        gerarSituacaoFechamento();
        gerarJTableRetira();
        gerarJTableVendas();
        gerarJTableContas();
        gerarJTableDeducoes();
        gerarJTableSituacao();
    }
    
    
    public void finalizarFechamentoCaixa(){
        
        for (int i=0;i<this.listaFormaVenda.size();i++){
            int idConta=0;
            float valor = 0;
            String historico="";
            if (this.listaFormaVenda.get(i).getDescricao().equalsIgnoreCase("Dinheiro")){
                idConta = 6;
                valor = this.listaFormaVenda.get(i).getValor();
                historico  = "Vendas em Dinheiro";
            }else if (this.listaFormaVenda.get(i).getDescricao().equalsIgnoreCase("Cheque")){
                idConta=8;
                valor = this.listaFormaVenda.get(i).getValor();
                historico  = "Vendas em Cheque";
            }else if (this.listaFormaVenda.get(i).getDescricao().equalsIgnoreCase("Cheque Pre")){
                idConta=9;
                valor = this.listaFormaVenda.get(i).getValor();
                historico  = "Vendas em Cheque Pré";
            }
            if ((idConta>0) && (this.listaFormaVenda.get(i).getValor()>0)){
                lancarCaixaRetaguarda(idConta, 0, valor, historico);
            }
        }
        
        for (int i = 0; i < listaContas.size(); i++) {
            if (listaContas.get(i).getValor() > 0) {
                if (listaContas.get(i).getDescricao().equalsIgnoreCase("Dinheiro")) {
                    lancarCaixaRetaguarda(7, 0, listaContas.get(i).getValor(), "Recebimentos em Dinheiro");
                } else if (listaContas.get(i).getDescricao().equalsIgnoreCase("Cheque")) {
                    lancarCaixaRetaguarda(10, 0, listaContas.get(i).getValor(), "Recebimentos em Cheque");
                } else if (listaContas.get(i).getDescricao().equalsIgnoreCase("Cheque Pre")) {
                    lancarCaixaRetaguarda(11, 0, listaContas.get(i).getValor(), "Recebimentos em Cheque Pré");
                }
            }
        }
        
        
        if (this.totalDevoucao>0){
            lancarCaixaRetaguarda(12, totalDevoucao, 0, "Devolução de Vendas");
        }
        fecharFechamento();
    }
    
    public void lancarCaixaRetaguarda(int idConta, float valorSaida, float valorEntrada, String historico){
        PlanoContaFacade planoContasFacade = new PlanoContaFacade();
        Planoconta conta = new Planoconta();
        try {
            conta = planoContasFacade.consultarPlanoconta(idConta);
        } catch (Exception ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro ao Consultar Conta");
        }
        
        MovimentoCaixaFacade moviementoCaixaFacade = new MovimentoCaixaFacade();
        Movimentocaixa caixa = new Movimentocaixa();
        caixa.setDataMovimento(this.fechaCaixa.getDataFechamento());
        caixa.setDescricao(historico);
        caixa.setEmpresa(this.fechaCaixa.getEmpresa());
        caixa.setPlanoconta(conta.getIdplanoconta());
        caixa.setUsuarioLancamento(this.fechaCaixa.getOperador());
        caixa.setValorEntrada(valorEntrada);
        caixa.setValorSaida(valorSaida);
        try {
            moviementoCaixaFacade.salvarCaixa(caixa);
        } catch (Exception ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro Lançar no Caixa");
        }
    }
    
    public void fecharFechamento(){
        FechaCaixaFacade fechaCaixaFacade = new FechaCaixaFacade();
        fechaCaixa.setSituacao("FECHADO");
        try {
             fechaCaixa = fechaCaixaFacade.salvar(fechaCaixa);
             finalizarUsuario(this.fechaCaixa.getIdfechaCaixa());
        } catch (Exception ex) {
            Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro ao Finalziar Fechamento");
        }
    }
    
//    public void listarCartoes(){
//        for (int i=0;i<listaFormaPagamento.size();i++){
//            if (listaFormaPagamento.get(i).getLocalRegistro().equalsIgnoreCase("Banco")){
//                
//            }
//        }
//    }
    
    public void gerarCartao(){
        
    }
    
    public double somarCartoes(List<Formavenda> listaFormaVenda){
        return 0.0;
    }
    
    public void finalizarUsuario(int idFechaCaixa){
        UsuariosController usuariosController = new UsuariosController();
        Usuarios usuarios = new Usuarios();
        usuarios = usuarioLogado.getUsuario();
        usuarios.setIdFechaCaixa(idFechaCaixa);
        usuariosController.salvarUsuario(usuarios);
    }
    
    public void verificarCheques(){
        ControleChequeController controleChequeController = new ControleChequeController();
        List<ChequeFechaCaixa> listaChequeCaixa = controleChequeController.ListaChequesCaixa(this.fechaCaixa.getIdfechaCaixa());
        double valorCheuqesCaixa = 0;
        if (listaChequeCaixa!=null){
            for (int i=0;i<listaChequeCaixa.size();i++){
                Controlecheques cheque = controleChequeController.consultarCheque(listaChequeCaixa.get(i).getControlecheques());
                if (cheque!=null){
                    valorCheuqesCaixa = valorCheuqesCaixa + cheque.getValorCheque();
                }
            }
        }
//        for(int i=0;i<listaFormaPagamento.size();i++){
//            if (listaFormaPagamento.get(i).getDescricao().equalsIgnoreCase("cheque")){
//                this.valorTotalCheques = this.valorTotalCheques + listaFormaPagamento.get(i).getValor();
//            }else if (listaFormaPagamento.get(i).getDescricao().equalsIgnoreCase("cheque pre")){
//                this.valorTotalCheques = this.valorTotalCheques + listaFormaPagamento.get(i).getValor();
//            }
//        }
//        if (valorTotalCheques!=valorCheuqesCaixa){
//            JOptionPane.showMessageDialog(rootPane, "Valores dos Cheques cadastrados com divergência");
//        }
    }
    
    public Float carregarListaCieloVendas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaCieloVendas = formaPagamentoController.getFormaPagamentoBandeiraCartao(2);
        VendaFacade vendaFacade = new VendaFacade();
        if (listaCieloVendas != null) {
            for (int i = 0; i < listaCieloVendas.size(); i++) {
                float valor = 0f;
                try {
                    valor = vendaFacade.valorFormaPagamento(listaCieloVendas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa());
                } catch (SQLException ex) {
                    Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
                listaCieloVendas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaRedCardVendas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaRedCardVendas = formaPagamentoController.getFormaPagamentoBandeiraCartao(1);
        VendaFacade vendaFacade = new VendaFacade();
        if (listaRedCardVendas != null) {
            for (int i = 0; i < listaRedCardVendas.size(); i++) {
                float valor = 0f;
                try {
                    valor = vendaFacade.valorFormaPagamento(listaRedCardVendas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa());
                } catch (SQLException ex) {
                    Logger.getLogger(FrmMostraFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
                listaRedCardVendas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaCieloContas() {
        Float valorTotal = 0.0f;
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaCieloContas = formaPagamentoController.getFormaPagamentoBandeiraCartao(2);
        ContasReceberController contasReceberController = new ContasReceberController();
        if (listaCieloContas != null) {
            for (int i = 0; i < listaCieloContas.size(); i++) {
                float valor = 0f;
                valor = contasReceberController.valorFormaPagamento(listaCieloContas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa(), fechaCaixa.getEmpresa());
                listaCieloContas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaRedCardContas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaRedCardContas = formaPagamentoController.getFormaPagamentoBandeiraCartao(1);
        ContasReceberController contasReceberController = new ContasReceberController();
        if (listaRedCardContas != null) {
            for (int i = 0; i < listaRedCardContas.size(); i++) {
                float valor = 0f;
                valor = contasReceberController.valorFormaPagamento(listaRedCardContas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa(), this.fechaCaixa.getEmpresa());
                listaRedCardContas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    private void carregarConfiguracaoContaCartao(){
        ConfiguracaoController configuracaoController = new ConfiguracaoController();
        Configuracao configuracao = configuracaoController.getConfiguracao(this.fechaCaixa.getEmpresa());
        if (configuracao!=null){
            contaCartao = configuracao.getFormaPagamento();
        }
    }
    
    public void gerarMostrarCartoes(){
        List<Formapagamento> listaCielo = new ArrayList<Formapagamento>();
        List<Formapagamento> listaRedCard = new ArrayList<Formapagamento>();
        
        //carregar Lista Cielo Vendas
        if (listaCieloVendas!=null){
            for(int i=0;i<listaCieloVendas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaCielo.size();j++){
                    int cielo = listaCielo.get(j).getIdformaPagamento();
                    int cieloVendas = listaCieloVendas.get(i).getIdformaPagamento();
                    if (cieloVendas==cielo){
                        achou = true;
                        listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloVendas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaCieloVendas.get(i).getIdformaPagamento());
                    fp.setValor(listaCieloVendas.get(i).getValor());
                    fp.setDescricao(listaCieloVendas.get(i).getDescricao());
                    listaCielo.add(fp);
                }
            }
        }
        
        
        //carregar Lista Cielo Contas
        if (listaCieloContas!=null){
            for(int i=0;i<listaCieloContas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaCielo.size();j++){
                    int cielo = listaCielo.get(j).getIdformaPagamento();
                    int cieloConta = listaCieloContas.get(i).getIdformaPagamento();
                    if (cieloConta==cielo){
                        achou = true;
                        listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloContas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaCieloContas.get(i).getIdformaPagamento());
                    fp.setValor(listaCieloContas.get(i).getValor());
                    fp.setDescricao(listaCieloContas.get(i).getDescricao());
                    listaCielo.add(fp);
                }
            }
        }
        
        
        //carregar Lista Red Card Vendas
        if (listaRedCardVendas!=null){
            for(int i=0;i<listaRedCardVendas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaRedCard.size();j++){
                    int redCard = listaRedCard.get(j).getIdformaPagamento();
                    int redCardVendas = listaRedCardVendas.get(i).getIdformaPagamento();
                    if (redCardVendas==redCard){
                        achou = true;
                        listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardVendas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaRedCardVendas.get(i).getIdformaPagamento());
                    fp.setValor(listaRedCardVendas.get(i).getValor());
                    fp.setDescricao(listaRedCardVendas.get(i).getDescricao());
                    listaRedCard.add(fp);
                }
            }
        }
        
        
        //carregar Lista Red Card Contas
        if (listaRedCardContas!=null){
            for(int i=0;i<listaRedCardContas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaRedCard.size();j++){
                    int redCard = listaRedCard.get(j).getIdformaPagamento();
                    int redCardContas = listaRedCardContas.get(i).getIdformaPagamento();
                    if (redCardContas==redCard){
                        achou = true;
                        listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardContas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaRedCardContas.get(i).getIdformaPagamento());
                    fp.setValor(listaRedCardContas.get(i).getValor());
                    fp.setDescricao(listaRedCardContas.get(i).getDescricao());
                    listaRedCard.add(fp);
                }
            }
        }
        gerarSituacaoFechamentoCartoes(listaCielo, listaRedCard);
        
    }
    
    
    public void gerarSituacaoFechamentoCartoes(List<Formapagamento> listaCielo, List<Formapagamento> listaRedCard){
        List<SituacaoFechamento> listaSituacaoCielo = new ArrayList<SituacaoFechamento>();
        List<SituacaoFechamento> listaSituacaoRedCard = new ArrayList<SituacaoFechamento>();
        float totalCielo =0;
        float totalRedCard= 0;
        for(int i=0;i<listaCielo.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaCielo.get(i).getDescricao());
            situacao.setValor(listaCielo.get(i).getValor());
            totalCielo+=situacao.getValor();
            listaSituacaoCielo.add(situacao);
        }
        
        for(int i=0;i<listaRedCard.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaRedCard.get(i).getDescricao());
            situacao.setValor(listaRedCard.get(i).getValor());
            totalRedCard+=situacao.getValor();
            listaSituacaoRedCard.add(situacao);
        }
        
        new FrmMostrarCartoes(listaSituacaoCielo, listaSituacaoRedCard);
    }
}