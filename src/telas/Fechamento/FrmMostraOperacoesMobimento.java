/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmMostraOperacoesMobimento.java
 *
 * Created on 10/08/2011, 15:28:59
 */
package telas.Fechamento;

import Regras.FormaPagamentoController;
import Regras.FormaVendaController;
import Regras.Formatacao;
import Regras.VendaController;
import controler.Config;
import facade.FechaCaixaFacade;
import facade.FormaPagamentoFacade;
import facade.FormaVendaFacade;
import facade.VendaFacade;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.Fechacaixa;
import model.Formapagamento;
import model.Formavenda;
import model.Saida;
import model.Venda;

/**
 *
 * @author Wolverine
 */
public class FrmMostraOperacoesMobimento extends javax.swing.JFrame {
    
    private Fechacaixa fechaCaixa;
    private VendaFechamentoTableModel modelVenda;
    private SaidaFechamentoTableModel modelSaida;
    private FormaPagamentoTableModel modelForma;
    private DefaultTableCellRenderer renderer;
    private List<Saida> listaSaida;
    private List<Venda> listaVenda;
    private Config config;
    private List<Formavenda> listaFormaVenda;

    /** Creates new form FrmMostraOperacoesMobimento */
    public FrmMostraOperacoesMobimento(Fechacaixa fechaCaixa, Config config) {
        this.fechaCaixa = fechaCaixa;    
        this.config = config;
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        this.listaSaida = new ArrayList<Saida>();
        this.listaVenda = new ArrayList<Venda>();
        this.listaFormaVenda = new ArrayList<Formavenda>();
        setModelVenda();
        setModelFormaPagamento(0);
        setModelSaida(0);
        preencherFiltroFormaPagamento();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        VendajTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SaidajTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        formajTable = new javax.swing.JTable();
        formaPagamentojComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visualizar Operanções do Fechamento");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        VendajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hora", "Nº Itens", "Valor Venda", "Valor Desconto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        VendajTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VendajTableMouseClicked(evt);
            }
        });
        VendajTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                VendajTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(VendajTable);
        VendajTable.getColumnModel().getColumn(0).setResizable(false);
        VendajTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        VendajTable.getColumnModel().getColumn(1).setResizable(false);
        VendajTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        VendajTable.getColumnModel().getColumn(2).setResizable(false);
        VendajTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        VendajTable.getColumnModel().getColumn(3).setResizable(false);
        VendajTable.getColumnModel().getColumn(3).setPreferredWidth(30);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SaidajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Descrição", "Quantidade", "Valor Venda"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SaidajTable);
        SaidajTable.getColumnModel().getColumn(0).setResizable(false);
        SaidajTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        SaidajTable.getColumnModel().getColumn(1).setResizable(false);
        SaidajTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        SaidajTable.getColumnModel().getColumn(2).setResizable(false);
        SaidajTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        SaidajTable.getColumnModel().getColumn(3).setResizable(false);
        SaidajTable.getColumnModel().getColumn(3).setPreferredWidth(20);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        formajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Descrição", "Valor Recebido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(formajTable);
        formajTable.getColumnModel().getColumn(0).setResizable(false);
        formajTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        formajTable.getColumnModel().getColumn(1).setResizable(false);
        formajTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        formajTable.getColumnModel().getColumn(2).setResizable(false);
        formajTable.getColumnModel().getColumn(2).setPreferredWidth(20);

        jLabel1.setText("Forma de Pagamento");

        jButton2.setText("Incluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Alterar Valor");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(formaPagamentojComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(66, 66, 66))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formaPagamentojComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/door_in.png"))); // NOI18N
        jButton1.setText("Fechar");
        jButton1.setToolTipText("Fecha Visualizador de Operações");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(162, 162, 162))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void VendajTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_VendajTableKeyPressed
        int linha = VendajTable.getSelectedRow();
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN){
           if (linha>=0){
               setModelFormaPagamento(linha+1);
               setModelSaida(linha+1);
           }
       }else if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP){
           if (linha>0){
               setModelFormaPagamento(linha-1);
               setModelSaida(linha-1);
           }
       }else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE){
           apagarMovimento(linha);
       }
    }//GEN-LAST:event_VendajTableKeyPressed

    private void VendajTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VendajTableMouseClicked
        int linha = VendajTable.getSelectedRow();
        if (linha>=0) {
            setModelFormaPagamento(linha);
            setModelSaida(linha);
        }
    }//GEN-LAST:event_VendajTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        incluirNovaFormaPagamento();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int linha = formajTable.getSelectedRow();
        if (linha>=0){
            Formavenda forma = listaFormaVenda.get(linha);
            String sValor = JOptionPane.showInputDialog("Valor R$ no Foramta 10,00");
            float valor = Formatacao.ConvercaoMonetariaFloat(sValor);
            forma.setValorRecebido(valor);
            FormaVendaController formaVendaController = new FormaVendaController();
            formaVendaController.gravarFormaVenda(forma);
            linha = VendajTable.getSelectedRow();
             if (linha>=0){
                setModelFormaPagamento(linha);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SaidajTable;
    private javax.swing.JTable VendajTable;
    private javax.swing.JComboBox formaPagamentojComboBox;
    private javax.swing.JTable formajTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
    private void setModelVenda(){
        this.renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    String valorFormatado;
                    if (value instanceof Double) {
                        Double valor = (Double) value;

                        NumberFormat format = NumberFormat.getCurrencyInstance();
                        format.setMinimumFractionDigits(2);
                        valorFormatado = format.format(valor);
                    } else {
                        valorFormatado = value.toString();
                    }

                    Component comp = super.getTableCellRendererComponent(table, valorFormatado,
                            isSelected, hasFocus, row, column);

                    return comp;
                }
        };
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        listaVenda = localizarListaVenda(this.fechaCaixa.getIdfechaCaixa());
        if (listaVenda!=null){
            modelVenda = new VendaFechamentoTableModel(listaVenda);
        }else modelVenda = new VendaFechamentoTableModel(new ArrayList<Venda>());
        VendajTable.setModel(modelVenda);
        VendajTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        VendajTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        VendajTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        VendajTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        VendajTable.repaint(); 
    }
    
    private void setModelSaida(int linha){
        this.renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    String valorFormatado;
                    if (value instanceof Double) {
                        Double valor = (Double) value;

                        NumberFormat format = NumberFormat.getCurrencyInstance();
                        format.setMinimumFractionDigits(2);
                        valorFormatado = format.format(valor);
                    } else {
                        valorFormatado = value.toString();
                    }

                    Component comp = super.getTableCellRendererComponent(table, valorFormatado,
                            isSelected, hasFocus, row, column);

                    return comp;
                }
        };
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        listaSaida = localizaListaSaida(listaVenda.get(linha).getIdvenda());
        if (listaSaida!=null){
            modelSaida = new SaidaFechamentoTableModel(this.listaSaida);
        }else modelSaida = new SaidaFechamentoTableModel(new ArrayList<Saida>());
        SaidajTable.setModel(modelSaida);
        SaidajTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        SaidajTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        SaidajTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        SaidajTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        SaidajTable.repaint(); 
    }
    
    private void setModelFormaPagamento(int linha){
        this.renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    String valorFormatado;
                    if (value instanceof Double) {
                        Double valor = (Double) value;

                        NumberFormat format = NumberFormat.getCurrencyInstance();
                        format.setMinimumFractionDigits(2);
                        valorFormatado = format.format(valor);
                    } else {
                        valorFormatado = value.toString();
                    }

                    Component comp = super.getTableCellRendererComponent(table, valorFormatado,
                            isSelected, hasFocus, row, column);

                    return comp;
                }
        };
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        listaFormaVenda = localizarFormaVenda(this.listaVenda.get(linha).getIdvenda());
        if (this.listaFormaVenda!=null){
            modelForma = new FormaPagamentoTableModel(listaFormaVenda);
        }else modelForma = new FormaPagamentoTableModel(new ArrayList<Formavenda>());
        formajTable.setModel(modelForma);
        formajTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        formajTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        formajTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        formajTable.repaint(); 
    }
    
    public void apagarMovimento(int linha){
        FormaVendaFacade formaVendaFacade = new FormaVendaFacade();
        if (listaFormaVenda != null) {
            for (int i = 0; i < listaFormaVenda.size(); i++) {
                try {
                    formaVendaFacade.excluirFormaVenda(listaFormaVenda.get(i));
                } catch (SQLException ex) {
                    Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (listaSaida != null) {
            for (int i = 0; i < listaSaida.size(); i++) {
                try {
                    formaVendaFacade.excluirSaida(listaSaida.get(i));
                } catch (SQLException ex) {
                    Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        VendaFacade vendaFacade = new VendaFacade();
        try {
            vendaFacade.excluirVendas(listaVenda.get(linha));
        } catch (Exception ex) {
            Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void preencherFiltroFormaPagamento(){
        FormaPagamentoFacade formaPagamentoFacade = new FormaPagamentoFacade();
        List<Formapagamento> listaFormaPagamento = null;
        try {
            listaFormaPagamento = formaPagamentoFacade.ListarFormaPagamento(config.getEmpresa().getIdempresa());
        } catch (SQLException ex) {
            Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Erro Consultar Forma Pagamento " + ex);
        }
        if (listaFormaPagamento!=null){
            formaPagamentojComboBox.addItem("Todas as Formas");
            for (int i=0;i<listaFormaPagamento.size();i++){
                formaPagamentojComboBox.addItem(listaFormaPagamento.get(i));
            }
        }
    }
    
    
    private void filtarVendas(){
        
        Object comboBox = formaPagamentojComboBox.getSelectedItem();
        FechaCaixaFacade fechaCaixaFacade = new FechaCaixaFacade();
        List<Venda> listaVenda = new ArrayList<Venda>();
        if (!comboBox.toString().equalsIgnoreCase("Todas as Formas")){
            Formapagamento formapagamento = new Formapagamento();
            formapagamento = (Formapagamento) formaPagamentojComboBox.getSelectedItem();
            if(listaVenda.size()>0){
              for(int i=0;i<listaVenda.size();i++){
                  for(int l=0;l<listaFormaVenda.size();l++){
                      int fid = listaFormaVenda.get(l).getFormapagamento();
                      int vid = formapagamento.getIdformaPagamento(); 
                      if (vid==fid){
                          listaVenda.add(listaVenda.get(i));
                          l = 1000;
                      }
                  }
              }  
            }
            this.listaVenda.removeAll(this.listaVenda);
            this.listaVenda.addAll(listaVenda);
        }else {
            try {
                this.fechaCaixa = fechaCaixaFacade.consultar(fechaCaixa);
            } catch (Exception ex) {
                Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Erro Consultar Fechamento " + ex);
            }
        }
        if (this.listaVenda.size()<=0){
            JOptionPane.showMessageDialog(rootPane, "Não existem Vendas nesta Forma de Pagamento");
             try {
                this.fechaCaixa = fechaCaixaFacade.consultar(fechaCaixa);
            } catch (Exception ex) {
                Logger.getLogger(FrmMostraOperacoesMobimento.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Erro Consultar Fechamento " + ex);
            }
        }
        setModelVenda();
        setModelFormaPagamento(0);
        setModelSaida(0);
    }
    
    
    public List<Venda> localizarListaVenda(int idFechaCaixa){
        VendaController vendaController= new VendaController();
        return vendaController.ListarVenda(idFechaCaixa);
    }
    
    public List<Saida> localizaListaSaida(int idVenda){
        VendaController vendaController = new VendaController();
        return vendaController.listarSaidaVenda(idVenda);
    }
    
    public List<Formavenda> localizarFormaVenda(int idVenda){
        FormaVendaController formaVendaController = new FormaVendaController();
        return formaVendaController.consultarFormaVenda(idVenda);
    }
    
    public void incluirNovaFormaPagamento(){
        Formavenda forma = new Formavenda();
        Formapagamento fp = new Formapagamento();
        fp = (Formapagamento) formaPagamentojComboBox.getSelectedItem();
        forma.setFormapagamento(fp.getIdformaPagamento());
        String sValor = JOptionPane.showInputDialog("Valor R$ no formato 10,00");
        float valor = Formatacao.ConvercaoMonetariaFloat(sValor);
        forma.setValorRecebido(valor);
        forma.setVenda(listaFormaVenda.get(0).getVenda());
        FormaVendaController formaVendaController = new FormaVendaController();
        formaVendaController.gravarFormaVenda(forma);
        int linha = VendajTable.getSelectedRow();
        if (linha>=0){
            setModelFormaPagamento(linha);
        }
    }
  

}
