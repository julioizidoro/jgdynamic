/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmFechamento.java
 *
 * Created on 10/08/2011, 13:55:24
 */
package telas.Fechamento;

import Regras.ConfiguracaoController;
import Regras.ContasReceberController;
import Regras.FormaPagamentoController;
import Regras.Formatacao;
import com.toedter.calendar.JTextFieldDateEditor;
import controler.Config;
import controler.UsuarioLogado;
import facade.FechaCaixaFacade;
import facade.VendaFacade;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.Configuracao;
import model.Fechacaixa;
import model.Formapagamento;

/**
 *
 * @author Wolverine
 */
public class FrmFechamento extends javax.swing.JFrame {
    
    private String datePattern;
    private String maskPattern;
    private char placeHolder;
    private DefaultTableCellRenderer renderer;
    
    private ConsultaFechamentoTableModel model;
    private List<Fechacaixa> listaFechaCaixa;
    private Config config;
    
    List<Formapagamento> listaCieloVendas;
    List<Formapagamento> listaRedCardVendas;
    List<Formapagamento> listaCieloContas;
    List<Formapagamento> listaRedCardContas;
    private int contaCartao;
    private Fechacaixa fechaCaixa;
    UsuarioLogado usuarioLogado;

    /** Creates new form FrmFechamento */
    public FrmFechamento(Config config, UsuarioLogado usuarioLogado) {
        datePattern = "dd/MM/yyyy";
        maskPattern = "##/##/####";
        placeHolder = '_';
        this.config= config;
        this.usuarioLogado = usuarioLogado;
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        dataIniciojDateChooser.setDate(new Date());
        dataFinaljDateChooser.setDate(new Date());
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dataIniciojDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
            maskPattern, placeHolder));
    dataFinaljDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
        maskPattern, placeHolder));
jLabel2 = new javax.swing.JLabel();
jButton1 = new javax.swing.JButton();
jButton6 = new javax.swing.JButton();
jPanel2 = new javax.swing.JPanel();
jScrollPane1 = new javax.swing.JScrollPane();
fechamentojTable = new javax.swing.JTable();
jButton5 = new javax.swing.JButton();
jButton2 = new javax.swing.JButton();
jButton4 = new javax.swing.JButton();
jButton3 = new javax.swing.JButton();

setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
setTitle("Consulta de Fechamento");

jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

jLabel1.setText("Data Inicial");

jLabel2.setText("Data Final");

jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/magnifier.png"))); // NOI18N
jButton1.setText("Procurar");
jButton1.setToolTipText("Procurar Fechamentos");
jButton1.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
    }
    });

    jButton6.setText("Valor Devoluções");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1)
                .addComponent(dataIniciojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(dataFinaljDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton6))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataFinaljDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataIniciojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    fechamentojTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null}
        },
        new String [] {
            "Nº Fechamento", "Data ", "Hora Abertura", "Valor Abertura", "Hora Fechamento", "Valor Fechamento", "Nº Caixa", "Operador"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jScrollPane1.setViewportView(fechamentojTable);
    fechamentojTable.getColumnModel().getColumn(0).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(0).setPreferredWidth(10);
    fechamentojTable.getColumnModel().getColumn(1).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(1).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(2).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(2).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(3).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(3).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(4).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(4).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(5).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(5).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(6).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(6).setPreferredWidth(20);
    fechamentojTable.getColumnModel().getColumn(7).setResizable(false);
    fechamentojTable.getColumnModel().getColumn(7).setPreferredWidth(20);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1)
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/note.png"))); // NOI18N
    jButton5.setText("Visualizar Cartões");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/note.png"))); // NOI18N
    jButton2.setText("Visualizar Valores");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/note.png"))); // NOI18N
    jButton4.setText("Visulizar Operações");
    jButton4.setToolTipText("Visualiza Operações do Movimento");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/door_in.png"))); // NOI18N
    jButton3.setText("Fechar");
    jButton3.setToolTipText("Sair da Consutla de Fechamentos");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 115, Short.MAX_VALUE)
                    .addComponent(jButton5)
                    .addGap(58, 58, 58)
                    .addComponent(jButton2)
                    .addGap(51, 51, 51)
                    .addComponent(jButton4)
                    .addGap(31, 31, 31)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(161, 161, 161))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2)
                .addComponent(jButton4)
                .addComponent(jButton3)
                .addComponent(jButton5))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if ((dataIniciojDateChooser.getDate()!=null) && (dataFinaljDateChooser.getDate()!=null)){
            setModel();
        }else {
            JOptionPane.showMessageDialog(null, "Verificar as datas selecionadas");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (usuarioLogado.getAcesso().getvValores() == 1) {
            int linha = fechamentojTable.getSelectedRow();
            if (linha >= 0) {
                new FrmMostraFechamento(this.listaFechaCaixa.get(linha), usuarioLogado);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um Fechamento");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (usuarioLogado.getAcesso().getvOperacao() == 1) {
            int linha = fechamentojTable.getSelectedRow();
            if (linha >= 0) {
                new FrmMostraOperacoesMobimento(this.listaFechaCaixa.get(linha), config);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um Fechamento");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (usuarioLogado.getAcesso().getvCartao() == 1) {
            int linha = fechamentojTable.getSelectedRow();
            this.fechaCaixa = listaFechaCaixa.get(linha);
            carregarListaCieloContas();
            carregarListaCieloVendas();
            carregarListaRedCardContas();
            carregarListaRedCardVendas();
            List<Formapagamento> listaCielo = new ArrayList<Formapagamento>();
            List<Formapagamento> listaRedCard = new ArrayList<Formapagamento>();

            //carregar Lista Cielo Vendas
            if (listaCieloVendas != null) {
                for (int i = 0; i < listaCieloVendas.size(); i++) {
                    boolean achou = false;
                    for (int j = 0; j < listaCielo.size(); j++) {
                        int cielo = listaCielo.get(j).getIdformaPagamento();
                        int cieloVendas = listaCieloVendas.get(i).getIdformaPagamento();
                        if (cieloVendas == cielo) {
                            achou = true;
                            listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloVendas.get(i).getValor());
                            j = 1000;
                        }
                    }
                    if (!achou) {
                        Formapagamento fp = new Formapagamento();
                        fp.setIdformaPagamento(listaCieloVendas.get(i).getIdformaPagamento());
                        fp.setValor(listaCieloVendas.get(i).getValor());
                        fp.setDescricao(listaCieloVendas.get(i).getDescricao());
                        listaCielo.add(fp);
                    }
                }
            }


            //carregar Lista Cielo Contas
            if (listaCieloContas != null) {
                for (int i = 0; i < listaCieloContas.size(); i++) {
                    boolean achou = false;
                    for (int j = 0; j < listaCielo.size(); j++) {
                        int cielo = listaCielo.get(j).getIdformaPagamento();
                        int cieloConta = listaCieloContas.get(i).getIdformaPagamento();
                        if (cieloConta == cielo) {
                            achou = true;
                            listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloContas.get(i).getValor());
                            j = 1000;
                        }
                    }
                    if (!achou) {
                        Formapagamento fp = new Formapagamento();
                        fp.setIdformaPagamento(listaCieloContas.get(i).getIdformaPagamento());
                        fp.setValor(listaCieloContas.get(i).getValor());
                        fp.setDescricao(listaCieloContas.get(i).getDescricao());
                        listaCielo.add(fp);
                    }
                }
            }


            //carregar Lista Red Card Vendas
            if (listaRedCardVendas != null) {
                for (int i = 0; i < listaRedCardVendas.size(); i++) {
                    boolean achou = false;
                    for (int j = 0; j < listaRedCard.size(); j++) {
                        int redCard = listaRedCard.get(j).getIdformaPagamento();
                        int redCardVendas = listaRedCardVendas.get(i).getIdformaPagamento();
                        if (redCardVendas == redCard) {
                            achou = true;
                            listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardVendas.get(i).getValor());
                            j = 1000;
                        }
                    }
                    if (!achou) {
                        Formapagamento fp = new Formapagamento();
                        fp.setIdformaPagamento(listaRedCardVendas.get(i).getIdformaPagamento());
                        fp.setValor(listaRedCardVendas.get(i).getValor());
                        fp.setDescricao(listaRedCardVendas.get(i).getDescricao());
                        listaRedCard.add(fp);
                    }
                }
            }


            //carregar Lista Red Card Contas
            if (listaRedCardContas != null) {
                for (int i = 0; i < listaRedCardContas.size(); i++) {
                    boolean achou = false;
                    for (int j = 0; j < listaRedCard.size(); j++) {
                        int redCard = listaRedCard.get(j).getIdformaPagamento();
                        int redCardContas = listaRedCardContas.get(i).getIdformaPagamento();
                        if (redCardContas == redCard) {
                            achou = true;
                            listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardContas.get(i).getValor());
                            j = 1000;
                        }
                    }
                    if (!achou) {
                        Formapagamento fp = new Formapagamento();
                        fp.setIdformaPagamento(listaRedCardContas.get(i).getIdformaPagamento());
                        fp.setValor(listaRedCardContas.get(i).getValor());
                        fp.setDescricao(listaRedCardContas.get(i).getDescricao());
                        listaRedCard.add(fp);
                    }
                }
            }
            gerarSituacaoFechamentoCartoes(listaCielo, listaRedCard);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int linha = fechamentojTable.getSelectedRow();
        if (linha>=0){
            Fechacaixa fc = listaFechaCaixa.get(linha);
            if (fc!=null){
                String  valor = JOptionPane.showInputDialog("Valor da Devolução");
                double valorDevolucao = Formatacao.formatarStringDouble(valor);
                fc.setCreditoDevolucao(valorDevolucao);
                FechaCaixaFacade fechaCaixaFacade = new FechaCaixaFacade();
                this.listaFechaCaixa.get(linha).setCreditoDevolucao(valorDevolucao);
                try {
                    fechaCaixaFacade.salvar(fc);
                } catch (Exception ex) {
                    Logger.getLogger(FrmFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dataFinaljDateChooser;
    private com.toedter.calendar.JDateChooser dataIniciojDateChooser;
    private javax.swing.JTable fechamentojTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setModel(){
        String dataInicial = Formatacao.ConvercaoDataSql(dataIniciojDateChooser.getDate());
        String dataFinal = Formatacao.ConvercaoDataSql(dataFinaljDateChooser.getDate());
        FechaCaixaFacade fechaCaixaFacade = new FechaCaixaFacade();
        try {
            this.listaFechaCaixa = fechaCaixaFacade.pesquisarFechamento(dataInicial, dataFinal, this.config.getEmpresa().getIdempresa());
        } catch (SQLException ex) {
            Logger.getLogger(FrmFechamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro ocnsultar Fechamento "  + ex);
        }
       this.renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    String valorFormatado;
                    if (value instanceof Double) {
                        Double valor = (Double) value;

                        NumberFormat format = NumberFormat.getCurrencyInstance();
                        format.setMinimumFractionDigits(2);
                        valorFormatado = format.format(valor);
                    } else {
                        valorFormatado = value.toString();
                    }

                    Component comp = super.getTableCellRendererComponent(table, valorFormatado,
                            isSelected, hasFocus, row, column);

                    return comp;
                }
        };
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        model = new ConsultaFechamentoTableModel(listaFechaCaixa);
        fechamentojTable.setModel(model);
        fechamentojTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        fechamentojTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        fechamentojTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        fechamentojTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        fechamentojTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        fechamentojTable.getColumnModel().getColumn(5).setPreferredWidth(20);
        fechamentojTable.getColumnModel().getColumn(6).setPreferredWidth(20);
        fechamentojTable.repaint();
    }
    
    private int calcularNumeroDias(){
        int numeroDias =0;
        if (dataIniciojDateChooser.getDate()==dataFinaljDateChooser.getDate()){
            numeroDias=1;
        }else {
            numeroDias = Formatacao.subtrairDatas(dataFinaljDateChooser.getDate(), dataIniciojDateChooser.getDate());
            numeroDias+=1;
        }
        return numeroDias;
    }
    
    public void gerarSituacaoFechamentoCartoes(List<Formapagamento> listaCielo, List<Formapagamento> listaRedCard){
        List<SituacaoFechamento> listaSituacaoCielo = new ArrayList<SituacaoFechamento>();
        List<SituacaoFechamento> listaSituacaoRedCard = new ArrayList<SituacaoFechamento>();
        for(int i=0;i<listaCielo.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaCielo.get(i).getDescricao());
            situacao.setValor(listaCielo.get(i).getValor());
            listaSituacaoCielo.add(situacao);
        }
        
        for(int i=0;i<listaRedCard.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaRedCard.get(i).getDescricao());
            situacao.setValor(listaRedCard.get(i).getValor());
            listaSituacaoRedCard.add(situacao);
        }
        
        new FrmMostrarCartoes(listaSituacaoCielo, listaSituacaoRedCard);
    }
    
    public Float carregarListaCieloVendas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaCieloVendas = formaPagamentoController.getFormaPagamentoBandeiraCartao(2);
        VendaFacade vendaFacade = new VendaFacade();
        if (listaCieloVendas != null) {
            for (int i = 0; i < listaCieloVendas.size(); i++) {
                float valor = 0f;
                try {
                    valor = vendaFacade.valorFormaPagamento(listaCieloVendas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa());
                } catch (SQLException ex) {
                    Logger.getLogger(FrmFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
                listaCieloVendas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaRedCardVendas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaRedCardVendas = formaPagamentoController.getFormaPagamentoBandeiraCartao(1);
        VendaFacade vendaFacade = new VendaFacade();
        if (listaRedCardVendas != null) {
            for (int i = 0; i < listaRedCardVendas.size(); i++) {
                float valor = 0f;
                try {
                    valor = vendaFacade.valorFormaPagamento(listaRedCardVendas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa());
                } catch (SQLException ex) {
                    Logger.getLogger(FrmFechamento.class.getName()).log(Level.SEVERE, null, ex);
                }
                listaRedCardVendas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaCieloContas() {
        Float valorTotal = 0.0f;
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaCieloContas = formaPagamentoController.getFormaPagamentoBandeiraCartao(2);
        ContasReceberController contasReceberController = new ContasReceberController();
        if (listaCieloContas != null) {
            for (int i = 0; i < listaCieloContas.size(); i++) {
                float valor = 0f;
                valor = contasReceberController.valorFormaPagamento(listaCieloContas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa(), this.config.getEmpresa().getIdempresa());
                listaCieloContas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    public Float carregarListaRedCardContas() {
        Float valorTotal = 0.0f;

        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaRedCardContas = formaPagamentoController.getFormaPagamentoBandeiraCartao(1);
        ContasReceberController contasReceberController = new ContasReceberController();
        if (listaRedCardContas != null) {
            for (int i = 0; i < listaRedCardContas.size(); i++) {
                float valor = 0f;
                valor = contasReceberController.valorFormaPagamento(listaRedCardContas.get(i).getIdformaPagamento(), this.fechaCaixa.getIdfechaCaixa(), this.config.getEmpresa().getIdempresa());
                listaRedCardContas.get(i).setValor(valor);
                valorTotal = valorTotal + valor;
            }
        }
        return valorTotal;
    }
    
    private void carregarConfiguracaoContaCartao(){
        ConfiguracaoController configuracaoController = new ConfiguracaoController();
        Configuracao configuracao = configuracaoController.getConfiguracao(fechaCaixa.getEmpresa());
        if (configuracao!=null){
            contaCartao = configuracao.getFormaPagamento();
        }
    }

}

