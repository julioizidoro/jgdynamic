/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmVisualizarPedidoForProduto.java
 *
 * Created on 27/06/2011, 10:26:11
 */
package telas.ForPedido;


import Interfaces.IforPedido;
import Interfaces.ItelaConsulta;
import Regras.*;
import beanController.NfDuplicatas;
import beanController.NfProdutos;
import beanController.NotaEletronica;
import com.toedter.calendar.JTextFieldDateEditor;
import controler.Config;
import facade.ForPedidoFacade;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.net.URL;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.*;
import telas.Produtos.FrmConsultaProdutos;



/**
 *
 * @author Wolverine
 */
public class FrmVisualizarPedidoForProduto extends javax.swing.JFrame implements ItelaConsulta {

    /** Creates new form FrmVisualizarPedidoForProduto */
    private DefaultTableCellRenderer renderer;
    private String datePattern;
    private String maskPattern;
    private char placeHolder;
    private  PedidoProdutoTableModel pedidoProdutoModel;
    private ForPedido forPedido;
    IforPedido telaPedido;
    private Produto produto;
    private Config config;

    public FrmVisualizarPedidoForProduto(ForPedido forPedido, IforPedido telaPedido, Config config) {
        this.forPedido = forPedido;
        this.config = config;
        datePattern = "dd/MM/yyyy";
        maskPattern = "##/##/##";
        placeHolder = '_';
        this.telaPedido = telaPedido;
        initComponents();
        Fornecedor fornecedor = localizarFornecedor(forPedido.getForPedido().getFornecedor());
        nomeFantasiajTextField.setText(fornecedor.getNomeFantasia());
        if (forPedido.getForPedido().getDataEmissao()==null){
            dataEmissaojDateChooser.setDate(new Date());
            forPedido.getForPedido().setDataEmissao(new Date());
        }else {
            dataEmissaojDateChooser.setDate(forPedido.getForPedido().getDataEmissao());
        }
        if (!(forPedido.getForPedido().getCondicaoPagamento()==null)){
            condicaojComboBox.setSelectedItem(forPedido.getForPedido().getCondicaoPagamento());
        }
        if (forPedido.getForPedido().getDataEntrega()==null){
            dataPrevistajDateChooser.setDate(Formatacao.SomarDiasData(forPedido.getForPedido().getDataEmissao(), fornecedor.getPrazoEntrega()));
        }else {
            dataPrevistajDateChooser.setDate(forPedido.getForPedido().getDataEntrega());
        }
        setListaPedidoProduto();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        finalizarjButton.setEnabled(true);
        setVisible(true);
        dataEmissaojDateChooser.requestFocus();
    }
            
    
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nomeFantasiajTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dataEmissaojDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
            maskPattern, placeHolder));
    jLabel3 = new javax.swing.JLabel();
    dataPrevistajDateChooser = new com.toedter.calendar.JDateChooser(null, null, datePattern, new JTextFieldDateEditor(datePattern,
        maskPattern, placeHolder));
condicaojComboBox = new javax.swing.JComboBox();
jPanel3 = new javax.swing.JPanel();
finalizarjButton = new javax.swing.JButton();
fecharjButton = new javax.swing.JButton();
removerjButton = new javax.swing.JButton();
jLabel4 = new javax.swing.JLabel();
jLabel5 = new javax.swing.JLabel();
codigojTextField = new javax.swing.JTextField();
descricaojTextField = new javax.swing.JTextField();
jLabel6 = new javax.swing.JLabel();
unidadejTextField = new javax.swing.JTextField();
quantidadejTextField = new javax.swing.JTextField();
jLabel7 = new javax.swing.JLabel();
jLabel8 = new javax.swing.JLabel();
codigoFabricantejTextField = new javax.swing.JTextField();
embalagemjTextField = new javax.swing.JTextField();
jLabel9 = new javax.swing.JLabel();
jLabel10 = new javax.swing.JLabel();
jPanel2 = new javax.swing.JPanel();
jScrollPane1 = new javax.swing.JScrollPane();
pedidoProdutojTable = new javax.swing.JTable();

setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
setTitle("Finalizar Pedido Produto");

jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

jLabel1.setText("Fornecedor :");

nomeFantasiajTextField.setEditable(false);

jLabel2.setText("Data Emissão");

dataEmissaojDateChooser.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusGained(java.awt.event.FocusEvent evt) {
        dataEmissaojDateChooserFocusGained(evt);
    }
    });

    jLabel3.setText("Data Prevista");

    dataPrevistajDateChooser.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            dataPrevistajDateChooserFocusGained(evt);
        }
    });

    condicaojComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione Condição", "a Vista Dinheiro", "a Vista Cheque", "a Vista Depósito", "a Prazo Duplicata", "a Prazo Carteira", "a Prazo Cartão", " " }));

    jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    finalizarjButton.setText("Finalizar");
    finalizarjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            finalizarjButtonActionPerformed(evt);
        }
    });

    fecharjButton.setText("Fechar");
    fecharjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            fecharjButtonActionPerformed(evt);
        }
    });

    removerjButton.setText("Remover");
    removerjButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removerjButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(finalizarjButton)
            .addGap(91, 91, 91)
            .addComponent(removerjButton)
            .addGap(97, 97, 97)
            .addComponent(fecharjButton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(finalizarjButton)
                .addComponent(removerjButton)
                .addComponent(fecharjButton))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jLabel4.setText("Condição de Pagamento");

    jLabel5.setText("Produto");

    codigojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            codigojTextFieldKeyPressed(evt);
        }
    });

    jLabel6.setText("Descrição");

    quantidadejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            quantidadejTextFieldKeyPressed(evt);
        }
        public void keyReleased(java.awt.event.KeyEvent evt) {
            quantidadejTextFieldKeyReleased(evt);
        }
    });

    jLabel7.setText("Unidade");

    jLabel8.setText("Quantidade");

    codigoFabricantejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            codigoFabricantejTextFieldKeyPressed(evt);
        }
    });

    embalagemjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            embalagemjTextFieldKeyPressed(evt);
        }
    });

    jLabel9.setText("Codígo Fabricante");

    jLabel10.setText("Embalagem");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nomeFantasiajTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(30, 30, 30)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataEmissaojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataPrevistajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGap(28, 28, 28)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(condicaojComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(27, 27, 27))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(codigojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(descricaojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addComponent(unidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(quantidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(codigoFabricantejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10)
                        .addComponent(embalagemjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(41, 41, 41))))
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(235, 235, 235)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel5)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel6)))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(condicaojComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dataPrevistajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataEmissaojDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(nomeFantasiajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(jLabel6)
                .addComponent(jLabel7)
                .addComponent(jLabel8)
                .addComponent(jLabel9)
                .addComponent(jLabel10))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(codigojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(descricaojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(unidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(quantidadejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(codigoFabricantejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(embalagemjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    pedidoProdutojTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}
        },
        new String [] {
            "Código", "Descrição", "Unidade", "Quantidade", "Cod. Fabricante"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jScrollPane1.setViewportView(pedidoProdutojTable);
    pedidoProdutojTable.getColumnModel().getColumn(0).setResizable(false);
    pedidoProdutojTable.getColumnModel().getColumn(0).setPreferredWidth(10);
    pedidoProdutojTable.getColumnModel().getColumn(1).setResizable(false);
    pedidoProdutojTable.getColumnModel().getColumn(1).setPreferredWidth(300);
    pedidoProdutojTable.getColumnModel().getColumn(2).setResizable(false);
    pedidoProdutojTable.getColumnModel().getColumn(2).setPreferredWidth(10);
    pedidoProdutojTable.getColumnModel().getColumn(3).setResizable(false);
    pedidoProdutojTable.getColumnModel().getColumn(3).setPreferredWidth(10);
    pedidoProdutojTable.getColumnModel().getColumn(4).setResizable(false);
    pedidoProdutojTable.getColumnModel().getColumn(4).setPreferredWidth(20);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1)
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataEmissaojDateChooserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataEmissaojDateChooserFocusGained
        // TODO add your handling code here:
}//GEN-LAST:event_dataEmissaojDateChooserFocusGained

    private void dataPrevistajDateChooserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataPrevistajDateChooserFocusGained
        // TODO add your handling code here:
}//GEN-LAST:event_dataPrevistajDateChooserFocusGained

    private void fecharjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecharjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_fecharjButtonActionPerformed

    private void finalizarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizarjButtonActionPerformed
        if (validarCampos()) {
            this.forPedido.getForPedido().setDataEmissao(dataEmissaojDateChooser.getDate());
            this.forPedido.getForPedido().setDataEntrega(dataPrevistajDateChooser.getDate());
            this.forPedido.getForPedido().setCondicaoPagamento((String)condicaojComboBox.getSelectedItem());
            this.forPedido.getForPedido().setEntregue(false);
            ForPedidoFacade forPedidoFacade = new ForPedidoFacade();
            try {
                this.forPedido.setForPedido(forPedidoFacade.salvarForPedido(this.forPedido.getForPedido()));
                salvarProdutoListaPedido();
                JOptionPane.showMessageDialog(null, "Pedido Finalizado com Sucesso");
                finalizarjButton.setEnabled(false);
                removerjButton.setEnabled(false);
                this.dispose();
                telaPedido.fecharForProduto();
            } catch (SQLException ex) {
                Logger.getLogger(FrmVisualizarPedidoForProduto.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro Salvar Pedido " +ex);
            }
        }
    }//GEN-LAST:event_finalizarjButtonActionPerformed

    private void removerjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerjButtonActionPerformed
        int linha = pedidoProdutojTable.getSelectedRow();
        if (linha>=0){
            forPedido.getListaPedidoProduto().remove(linha);
            setListaPedidoProduto();
        }else {
            JOptionPane.showMessageDialog(null, "Selecione um Produto primeiro");
        }
    }//GEN-LAST:event_removerjButtonActionPerformed

    private void codigojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigojTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (codigojTextField.getText().length()>0){
                localizarProdoutoCodigo(codigojTextField.getText());
            }else {
                JOptionPane.showMessageDialog(rootPane, "Digite um código");
            }
        }
        if (evt.getKeyCode() == evt.VK_F2) {
             new FrmConsultaProdutos(this, config, true);
        }
    }//GEN-LAST:event_codigojTextFieldKeyPressed

    private void quantidadejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantidadejTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            incluirProdutoLista();
        }
    }//GEN-LAST:event_quantidadejTextFieldKeyPressed

    private void codigoFabricantejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoFabricantejTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            incluirProdutoLista();
        }
    }//GEN-LAST:event_codigoFabricantejTextFieldKeyPressed

    private void embalagemjTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_embalagemjTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            incluirProdutoLista();
        }
    }//GEN-LAST:event_embalagemjTextFieldKeyPressed

    private void quantidadejTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantidadejTextFieldKeyReleased
        quantidadejTextField.setText(Formatacao.decinalValorMonetario(quantidadejTextField.getText()));
    }//GEN-LAST:event_quantidadejTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField codigoFabricantejTextField;
    private javax.swing.JTextField codigojTextField;
    private javax.swing.JComboBox condicaojComboBox;
    private com.toedter.calendar.JDateChooser dataEmissaojDateChooser;
    private com.toedter.calendar.JDateChooser dataPrevistajDateChooser;
    private javax.swing.JTextField descricaojTextField;
    private javax.swing.JTextField embalagemjTextField;
    private javax.swing.JButton fecharjButton;
    private javax.swing.JButton finalizarjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeFantasiajTextField;
    private javax.swing.JTable pedidoProdutojTable;
    private javax.swing.JTextField quantidadejTextField;
    private javax.swing.JButton removerjButton;
    private javax.swing.JTextField unidadejTextField;
    // End of variables declaration//GEN-END:variables

    public void setListaPedidoProduto() {
        this.renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    String valorFormatado;
                    if (value instanceof Double) {
                        Double valor = (Double) value;

                        NumberFormat format = NumberFormat.getCurrencyInstance();
                        format.setMinimumFractionDigits(2);
                        valorFormatado = format.format(valor);
                    } else {
                        valorFormatado = value.toString();
                    }

                    Component comp = super.getTableCellRendererComponent(table, valorFormatado,
                            isSelected, hasFocus, row, column);

                    return comp;
                }
        };
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        pedidoProdutoModel = new PedidoProdutoTableModel(forPedido.getListaPedidoProduto(), this.config.getEmpresa().getIdempresa(), forPedido.getForPedido().getFornecedor() );
        pedidoProdutojTable.setModel(pedidoProdutoModel);
        pedidoProdutojTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        pedidoProdutojTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        pedidoProdutojTable.getColumnModel().getColumn(2).setPreferredWidth(10);
        pedidoProdutojTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
        pedidoProdutojTable.getColumnModel().getColumn(3).setPreferredWidth(10);
        pedidoProdutojTable.getColumnModel().getColumn(4).setCellRenderer(renderer);
        pedidoProdutojTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        pedidoProdutojTable.repaint();
    }
    
    private boolean validarCampos(){
        String condicao = (String) condicaojComboBox.getSelectedItem();
        if (condicao.equalsIgnoreCase("Selecione Condição")){
            JOptionPane.showMessageDialog(null, "Selecione a Condição de Pagamento");
            return false;
        }
         if (dataEmissaojDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(null,"Data de Emissão inválida");
            dataEmissaojDateChooser.setDate(null);
            dataEmissaojDateChooser.grabFocus();
            return false;
         }
         if (dataPrevistajDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(null,"Data de Prevista inválida");
            dataPrevistajDateChooser.setDate(null);
            dataPrevistajDateChooser.grabFocus();
            return false;
         }
         return true;
    }
    
    public void salvarProdutoListaPedido(){
        ForPedidoFacade forPedidoFacade = new ForPedidoFacade();
        int idPedido = 0;
        try {
            //idPedido = forPedidoFacade.getIdPedido();
            //forPedido.setForPedido(forPedidoFacade.consultarForPedido(idPedido));
        } catch (Exception ex) {
            Logger.getLogger(FrmVisualizarPedidoForProduto.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Erro Consultar Id Pedido " + ex);
        }
        List<Forpedproduto> listaPedidoProduto = forPedido.getListaPedidoProduto();
        if (forPedido.getForPedido().getIdForPedido()>0){
            for(int i=0;i<listaPedidoProduto.size();i++){
                Forpedproduto forPedidoProduto = new Forpedproduto();
                forPedidoProduto = listaPedidoProduto.get(i);
                forPedidoProduto.setForpedido(forPedido.getForPedido().getIdForPedido());
                forPedidoProduto.setEntrada(0);
                marcarProdutoPedido(forPedidoProduto.getProduto(), forPedido.getForPedido().getEmpresa(), forPedido.getForPedido().getFornecedor());
                salvarEstoqueDataPedido(dataEmissaojDateChooser.getDate(), forPedidoProduto.getProduto(), dataPrevistajDateChooser.getDate(), this.forPedido.getForPedido().getIdForPedido());
                try {
                    forPedidoFacade.salvarForPedProduto(forPedidoProduto);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmVisualizarPedidoForProduto.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "Erro Salvar Pedido Produto " +ex);
                }
            }
        }
        
    }
    
    public void salvarEstoqueDataPedido(Date dataPedido, int idProduto, Date dataPrevisao, int idPedido) {
        Estoque estoque = new Estoque();
        EstoqueController estoqueController = new EstoqueController();
        estoque = estoqueController.consultarEstoque(idProduto, this.config.getEmpresa().getIdempresa());
        if (estoque != null) {
            estoque.setDataPedido(dataPedido);
            estoque.setDataPrevisao(dataPrevisao);
            estoque.setPedido(idPedido);
            estoqueController.salvarEstoque(estoque);
        }
    }
    
    
    public void marcarProdutoPedido(int idProduto, int idEmpresa, int idFornecedor){
        VinculoController vinculoController = new VinculoController();
        Vinculo vinculo = new Vinculo();
        vinculo = vinculoController.consultarVinculo(idProduto, idEmpresa, idFornecedor);
        if (vinculo!=null){
            vinculo.setPedido("SIM");
            vinculoController.salvarVinculo(vinculo);
        }
    }
    
    public void desmarcarProdutoPedido(int idProduto, int idEmpresa, int idFornecedor){
        VinculoController vinculoController = new VinculoController();
        Vinculo vinculo = new Vinculo();
        vinculo = vinculoController.consultarVinculo(idProduto, idEmpresa, idFornecedor);
        vinculo.setPedido("NAO");
        vinculoController.salvarVinculo(vinculo);
    }
    
    
    public void localizarProdoutoCodigo(String referencia) {
        ProdutoController produtoController = new ProdutoController();
        produto = null;
        produto = produtoController.consultarProdutoReferencia(Integer.parseInt(referencia));
        if (produto==null){
            JOptionPane.showMessageDialog(rootPane, "Produto não Localizado");
        }else {
            descricaojTextField.setText(produto.getDescricao());
            unidadejTextField.setText(produto.getUnidade());
            quantidadejTextField.requestFocus();
            quantidadejTextField.selectAll();
        }
    }
    
    public void incluirProdutoLista(){
        if (produto != null) {
            VinculoController vinculoController = new VinculoController();
            Vinculo vinculo = new  Vinculo();
            vinculo.setCodigoFabricante(codigoFabricantejTextField.getText());
            if (embalagemjTextField.getText().length()>0){
                Double embalagem = Formatacao.ConvercaoMonetariaDouble(embalagemjTextField.getText());
                vinculo.setEmbalagem(embalagem.longValue());
            }else {
                Double embalagem = 0.0;
                vinculo.setEmbalagem(embalagem.longValue());
            }
            vinculo.setDataCompra(new Date());
            vinculo.setEmpresa(forPedido.getForPedido().getEmpresa());
            vinculo.setFornecedor(forPedido.getForPedido().getFornecedor());
            vinculo.setPedido("SIM");
            vinculo.setProduto(produto.getIdProduto());
            vinculo.setValorCompra(0.0f);
            vinculo = vinculoController.salvarVinculo(vinculo);
            Forpedproduto novoProduto = new Forpedproduto();
            novoProduto.setEntrada(1);
            if (this.forPedido.getForPedido().getIdForPedido()==null){
                novoProduto.setForpedido(0);
            }else novoProduto.setForpedido(forPedido.getForPedido().getIdForPedido());
            novoProduto.setProduto(produto.getIdProduto());
            novoProduto.setQuantidade(Formatacao.ConvercaoMonetariaDouble(quantidadejTextField.getText()));
            novoProduto.setVinculo(vinculo.getIdvinculo());
            forPedido.adicionarProduto(novoProduto);
            codigojTextField.setText("");
            descricaojTextField.setText("");
            unidadejTextField.setText("");
            quantidadejTextField.setText("");
            codigoFabricantejTextField.setText("");
            embalagemjTextField.setText("");
            codigojTextField.requestFocus();
            setListaPedidoProduto();
        }else {
            JOptionPane.showMessageDialog(rootPane, "Sem produto Selecionado");
        }
    }

    public void setData(Object objeto) {
        Produto produto = (Produto) objeto;
        codigojTextField.setText(String.valueOf(produto.getReferencia()));
        localizarProdoutoCodigo(String.valueOf(produto.getReferencia()));
    }

    public void setBanco(Banco banco) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setModelProduto(Produto produto, Estoque estoque) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setNFe(List<NfProdutos> listaProdutos, List<NfDuplicatas> listaDuplicatas, NotaEletronica nota, Fornecedor fornecedor) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setAlterarValorVenda(Estoque estoque) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setFornecedor(Object objeto) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setForPedido(Object objeto) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public Fornecedor localizarFornecedor(int idFornecedor){
        FornecedorController fornecedorController = new FornecedorController();
        return fornecedorController.consultarFornecedor(idFornecedor);
    }

    public void setPlanoContas(Object objeto) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setCliente(Object objeto) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setProdutoXML(Produto produto) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setArquivo(File arquivo) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
