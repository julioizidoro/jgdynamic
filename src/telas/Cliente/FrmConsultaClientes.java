/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PesquisaAssociado.java
 *
 * Created on 20/09/2009, 15:29:05
 */
package telas.Cliente;


import Interfaces.ItelaConsulta;
import Regras.ClienteController;
import controler.Config;
import controler.UsuarioLogado;
import controler.relatoriosJasper;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import model.Cliente;
import model.Municipios;
import telas.ContasReceber.IContasReceber;
import telas.ControleCheques.ItelaControleCheque;
import telas.NotaSaida.INotaSaidaBean;



public final class FrmConsultaClientes extends javax.swing.JFrame implements Icliente{

    private ConsultaClienteTableModel modelCliente;
    private Config config;
    List<Cliente> listaCliente;
    private UsuarioLogado usuarioLogado;
    private ItelaConsulta telaConsulta;
    private ItelaControleCheque telaCheque;
    private  DefaultTableCellRenderer rendererCor;
    private INotaSaidaBean telaSaidaNFe;
    

    public FrmConsultaClientes(Config config, UsuarioLogado usuarioLogado) {
        this.config = config;
        this.usuarioLogado = usuarioLogado;
        this.telaSaidaNFe = null;
        listaCliente = new ArrayList<Cliente>();
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarTodosClientes();
        nomejTextField.requestFocus();
        
        setVisible(true);
    }
    
     public FrmConsultaClientes(Config config, UsuarioLogado usuarioLogado, ItelaConsulta telaConsulta) {
        this.config = config;
        this.usuarioLogado = usuarioLogado;
        this.telaCheque= null;
        this.telaSaidaNFe = null;
        this.telaConsulta = telaConsulta;
        listaCliente = new ArrayList<Cliente>();
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarTodosClientes();
        nomejTextField.requestFocus();
        setVisible(true);
    }
     
     
     public FrmConsultaClientes(Config config, UsuarioLogado usuarioLogado, INotaSaidaBean telaSaidaNFe) {
        this.config = config;
        this.telaSaidaNFe = telaSaidaNFe;
        this.usuarioLogado = usuarioLogado;
        this.telaCheque= null;
        this.telaConsulta = null;
        listaCliente = new ArrayList<Cliente>();
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarTodosClientes();
        nomejTextField.requestFocus();
        setVisible(true);
    }
     
    public FrmConsultaClientes(Config config, UsuarioLogado usuarioLogado, ItelaControleCheque telaCheque) {
        this.config = config;
        this.usuarioLogado = usuarioLogado;
        this.telaConsulta = null;
        this.telaCheque = telaCheque;
        this.telaSaidaNFe=null;
        listaCliente = new ArrayList<Cliente>();
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarTodosClientes();
        nomejTextField.requestFocus();
        setVisible(true);
    }

    /** Creates new form PesquisaAssociado */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        AssociadosjPanel = new javax.swing.JPanel();
        nomejTextField = new javax.swing.JTextField();
        NomedoAssociadojLabel = new javax.swing.JLabel();
        BarradeTarefasjToolBar = new javax.swing.JToolBar();
        AdicionarjButton = new javax.swing.JButton();
        EditarjButton = new javax.swing.JButton();
        ExcluirjButton = new javax.swing.JButton();
        autorizadojButton = new javax.swing.JButton();
        visualizarjButton = new javax.swing.JButton();
        SeparadordeTarefasjSeparator = new javax.swing.JToolBar.Separator();
        documentosjButton = new javax.swing.JButton();
        enderecoEntregajButton = new javax.swing.JButton();
        historicojButton = new javax.swing.JButton();
        FecharrjButton = new javax.swing.JButton();
        codigojTextField = new javax.swing.JTextField();
        NomedoAssociadojLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientejTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta de Cliente");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AssociadosjPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AssociadosjPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        AssociadosjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nomejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomejTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomejTextFieldKeyReleased(evt);
            }
        });
        AssociadosjPanel.add(nomejTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 410, -1));

        NomedoAssociadojLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NomedoAssociadojLabel.setText("CÃ³digo");
        AssociadosjPanel.add(NomedoAssociadojLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        BarradeTarefasjToolBar.setFloatable(false);
        BarradeTarefasjToolBar.setRollover(true);

        AdicionarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo.png"))); // NOI18N
        AdicionarjButton.setText("Adicionar");
        AdicionarjButton.setToolTipText("Adicionar Cliente");
        AdicionarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AdicionarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        AdicionarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        AdicionarjButton.setName(""); // NOI18N
        AdicionarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        AdicionarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AdicionarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarAssociado(evt);
            }
        });
        BarradeTarefasjToolBar.add(AdicionarjButton);

        EditarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/alterar.png"))); // NOI18N
        EditarjButton.setText("Editar");
        EditarjButton.setToolTipText("Editar Cliente");
        EditarjButton.setEnabled(false);
        EditarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        EditarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        EditarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        EditarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarCadastroAssociado(evt);
            }
        });
        BarradeTarefasjToolBar.add(EditarjButton);

        ExcluirjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/excluir.png"))); // NOI18N
        ExcluirjButton.setText("Excluir");
        ExcluirjButton.setToolTipText("Excluir Cliente");
        ExcluirjButton.setEnabled(false);
        ExcluirjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ExcluirjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        ExcluirjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        ExcluirjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        ExcluirjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ExcluirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar.add(ExcluirjButton);

        autorizadojButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/dependente.png"))); // NOI18N
        autorizadojButton.setText("Autorizados");
        autorizadojButton.setToolTipText("Incluir Autorizados a Comprar");
        autorizadojButton.setEnabled(false);
        autorizadojButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        autorizadojButton.setMaximumSize(new java.awt.Dimension(80, 90));
        autorizadojButton.setMinimumSize(new java.awt.Dimension(80, 90));
        autorizadojButton.setPreferredSize(new java.awt.Dimension(80, 90));
        autorizadojButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        autorizadojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarDependente(evt);
            }
        });
        BarradeTarefasjToolBar.add(autorizadojButton);

        visualizarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        visualizarjButton.setText("Visualizar");
        visualizarjButton.setToolTipText("Visuzalizar Cadastro do Cliente");
        visualizarjButton.setEnabled(false);
        visualizarjButton.setFocusable(false);
        visualizarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        visualizarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        visualizarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        visualizarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        visualizarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        visualizarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizarjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar.add(visualizarjButton);
        BarradeTarefasjToolBar.add(SeparadordeTarefasjSeparator);

        documentosjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/relatorio.png"))); // NOI18N
        documentosjButton.setText("Documentos");
        documentosjButton.setToolTipText("Incluir Documentos");
        documentosjButton.setEnabled(false);
        documentosjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        documentosjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        documentosjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        documentosjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        documentosjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        documentosjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentosjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar.add(documentosjButton);

        enderecoEntregajButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        enderecoEntregajButton.setText("Entrega");
        enderecoEntregajButton.setToolTipText("EndereÃ§os de Entrega");
        enderecoEntregajButton.setEnabled(false);
        enderecoEntregajButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        enderecoEntregajButton.setMaximumSize(new java.awt.Dimension(80, 90));
        enderecoEntregajButton.setMinimumSize(new java.awt.Dimension(80, 90));
        enderecoEntregajButton.setPreferredSize(new java.awt.Dimension(80, 90));
        enderecoEntregajButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        enderecoEntregajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enderecoEntregajButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar.add(enderecoEntregajButton);

        historicojButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/curso.png"))); // NOI18N
        historicojButton.setText("HistÃ³rico");
        historicojButton.setToolTipText("HistÃ³rico de Clientes");
        historicojButton.setEnabled(false);
        historicojButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        historicojButton.setMaximumSize(new java.awt.Dimension(80, 90));
        historicojButton.setMinimumSize(new java.awt.Dimension(80, 90));
        historicojButton.setPreferredSize(new java.awt.Dimension(80, 90));
        historicojButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        historicojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historicojButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar.add(historicojButton);

        FecharrjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/voltar.png"))); // NOI18N
        FecharrjButton.setText("Fechar");
        FecharrjButton.setToolTipText("Fechar");
        FecharrjButton.setFocusable(false);
        FecharrjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FecharrjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FecharrjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FecharAssociado(evt);
            }
        });
        BarradeTarefasjToolBar.add(FecharrjButton);

        AssociadosjPanel.add(BarradeTarefasjToolBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 800, 80));

        codigojTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigojTextFieldActionPerformed(evt);
            }
        });
        codigojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigojTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codigojTextFieldKeyReleased(evt);
            }
        });
        AssociadosjPanel.add(codigojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        NomedoAssociadojLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NomedoAssociadojLabel1.setText("Nome / RazÃ£o Social");
        AssociadosjPanel.add(NomedoAssociadojLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        clientejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clientejTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        clientejTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientejTableMouseClicked(evt);
            }
        });
        clientejTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clientejTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(clientejTable);
        if (clientejTable.getColumnModel().getColumnCount() > 0) {
            clientejTable.getColumnModel().getColumn(0).setResizable(false);
            clientejTable.getColumnModel().getColumn(1).setResizable(false);
            clientejTable.getColumnModel().getColumn(2).setResizable(false);
            clientejTable.getColumnModel().getColumn(3).setResizable(false);
            clientejTable.getColumnModel().getColumn(4).setResizable(false);
            clientejTable.getColumnModel().getColumn(5).setResizable(false);
        }

        AssociadosjPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1000, 210));

        getContentPane().add(AssociadosjPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 400));

        jMenu4.setText("OperaÃ§Ãµes");

        jMenuItem13.setText("Liberar");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem8.setText("Converter Cadastro");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenu5.setText("Alterar Tipo");

        jMenuItem10.setText("Pessoa Fisica");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setText("Pessoa JurÃ­dica");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenuItem9.setText("Comdominio");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenu4.add(jMenu5);

        jMenuBar1.add(jMenu4);

        jMenu1.setText("RelatÃ³rios");

        jMenuItem1.setText("Ficha Cadastral");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("RelaÃ§Ã£o de Autorizados");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filtar");

        jMenuItem12.setText("CPF / CNPJ");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenu3.setText("Tipo de Cadastro");

        jMenuItem3.setText("Entrega");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem6.setText("Cheque");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem5.setText("Prazo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem7.setText("Todos");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AdicionarAssociado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarAssociado
        if (this.usuarioLogado.getAcesso().getCliente()==1){
            new FrmTipoCliente(this);
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_AdicionarAssociado

    private void AdicionarDependente(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarDependente
        if (this.usuarioLogado.getAcesso().getClienteAutoriza() == 1) {
            int linha = clientejTable.getSelectedRow();
            if (linha >= 0) {
                new FrmAutorizados(listaCliente.get(linha), usuarioLogado);
            }
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_AdicionarDependente

    private void EditarCadastroAssociado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarCadastroAssociado
        if (this.usuarioLogado.getAcesso().getClienteEditar() == 1) {
            int linha = clientejTable.getSelectedRow();
            if (linha >= 0) {
                if (this.listaCliente.get(linha).getTipo().equalsIgnoreCase("PF")) {
                    if (this.listaCliente.get(linha).getOperacao()==1){
                        new FrmCadastarClienteEntregaPF(listaCliente.get(linha), this, 0);
                    }else {
                        new FrmCadastrarClientePF(listaCliente.get(linha), this,0);
                    }
                    
                } else if (listaCliente.get(linha).getTipo().equalsIgnoreCase("PJ")) {
                    if (listaCliente.get(linha).getOperacao()==1){
                        new FrmCadastarClienteEntregaPJ(listaCliente.get(linha), this, 0);
                    }else new FrmCadastrarClientePJ(listaCliente.get(linha), this,0);
                } else if (listaCliente.get(linha).getTipo().equalsIgnoreCase("CD")) {
                    new FrmCadastrarClienteCondominio(listaCliente.get(linha), this,0);
                }
            }
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_EditarCadastroAssociado

    private void FecharAssociado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FecharAssociado
        this.dispose();
    }//GEN-LAST:event_FecharAssociado

    private void historicojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historicojButtonActionPerformed
        if (this.usuarioLogado.getAcesso().getClienteHistorico()==1){
            int linha = clientejTable.getSelectedRow();
            if (linha >=0){
                new FrmHistorico(listaCliente.get(linha), usuarioLogado);
            }else JOptionPane.showMessageDialog(rootPane, "Selecione um Cliente");
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_historicojButtonActionPerformed

    private void documentosjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentosjButtonActionPerformed
            
        
    }//GEN-LAST:event_documentosjButtonActionPerformed

    private void ExcluirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirjButtonActionPerformed
        if (this.usuarioLogado.getAcesso().getClienteExcluir()==1){
            
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_ExcluirjButtonActionPerformed

    private void codigojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigojTextFieldKeyPressed
        
    }//GEN-LAST:event_codigojTextFieldKeyPressed

    private void nomejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomejTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (nomejTextField.getText().length()>0){
                carregarConsultaClienteNome(nomejTextField.getText());
            }
        }
    }//GEN-LAST:event_nomejTextFieldKeyPressed

    private void clientejTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientejTableKeyPressed
            
    }//GEN-LAST:event_clientejTableKeyPressed

    private void clientejTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientejTableMouseClicked
        if (evt.getClickCount()==1){
           EditarjButton.setEnabled(true);
           ExcluirjButton.setEnabled(true);
           autorizadojButton.setEnabled(true);
           documentosjButton.setEnabled(true);
           enderecoEntregajButton.setEnabled(true);
           historicojButton.setEnabled(true);
           visualizarjButton.setEnabled(true);
        }else {
            if (evt.getClickCount()==2){
                int linha = clientejTable.getSelectedRow();
                if (linha>=0){
                    if (telaConsulta!=null){
                        telaConsulta.setCliente(listaCliente.get(linha));
                        this.dispose();
                    }else {
                        if (telaCheque!=null){
                            telaCheque.consultarCliente(listaCliente.get(linha));
                            this.dispose();
                        }else {
                            if (telaSaidaNFe!=null){
                                telaSaidaNFe.consultarCliente(listaCliente.get(linha));
                                this.dispose();
                            }
                        }
                    }
                }
            }
        }
        
    }//GEN-LAST:event_clientejTableMouseClicked

    private void enderecoEntregajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enderecoEntregajButtonActionPerformed
        if (this.usuarioLogado.getAcesso().getClienteEntrega() == 1) {
            int linha = clientejTable.getSelectedRow();
            if (linha >= 0) {
                new FrmEnderecoEntrega(listaCliente.get(linha), usuarioLogado);
            }
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_enderecoEntregajButtonActionPerformed

    private void visualizarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizarjButtonActionPerformed
                 if (this.usuarioLogado.getAcesso().getClienteEditar() == 1) {
            int linha = clientejTable.getSelectedRow();
            if (linha >= 0) {
                if (this.listaCliente.get(linha).getTipo().equalsIgnoreCase("PF")) {
                    if (this.listaCliente.get(linha).getOperacao()==1){
                        new FrmCadastarClienteEntregaPF(listaCliente.get(linha), this, 1);
                    }else {
                        new FrmCadastrarClientePF(listaCliente.get(linha), this, 1);
                    }
                    
                } else if (listaCliente.get(linha).getTipo().equalsIgnoreCase("PJ")) {
                    if (listaCliente.get(linha).getOperacao()==1){
                        new FrmCadastarClienteEntregaPJ(null, this, 1);
                    }else new FrmCadastrarClientePJ(listaCliente.get(linha), this, 1);
                } else if (listaCliente.get(linha).getTipo().equalsIgnoreCase("CD")) {
                    new FrmCadastrarClienteCondominio(listaCliente.get(linha), this,1);
                }
            }
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
    }//GEN-LAST:event_visualizarjButtonActionPerformed

    private void nomejTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomejTextFieldKeyReleased
           if (nomejTextField.getText().length()>0){
                carregarConsultaClienteNome(nomejTextField.getText());
            }
    }//GEN-LAST:event_nomejTextFieldKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int linha = clientejTable.getSelectedRow();
        if (linha>=0){
            imprimirFichaCadastral(listaCliente.get(linha));
        }else {
            JOptionPane.showMessageDialog(rootPane,"Selecione um cliente");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int linha = clientejTable.getSelectedRow();
        if (linha <= 0) {
            int idcliente = listaCliente.get(linha).getIdcliente();
            String url = ("telas/Cliente/Relatorios/reportRelacaoAutorizados.jasper");
            Map parameters = new HashMap();
            try {
                parameters.put("nomeFantasia", this.config.getEmpresa().getNomeFantasia());
                parameters.put("RazaoSocial", this.config.getEmpresa().getRazaoSocial());
                parameters.put("idcliente", idcliente);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "NÃ£o foi possÃ­vel gerar o relatÃ³rio " + ex);
                ex.printStackTrace();
            }
            new relatoriosJasper(url, parameters);
        }else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um cliente");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void codigojTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigojTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigojTextFieldActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        carregarTodosClientes();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        carregarClientesTipoCadastro(1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        carregarClientesTipoCadastro(2);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        carregarClientesTipoCadastro(10);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        int linha = clientejTable.getSelectedRow();
        if (linha>=0){
            converterCadastroCliente(listaCliente.get(linha));
        }else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um Cliente para Converter");
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
       int linha = clientejTable.getSelectedRow();
       if (linha>=0){
           ClienteController clienteController = new ClienteController();
           listaCliente.get(linha).setTipo("PF");
           clienteController.salvarCliente(listaCliente.get(linha));
           carregarTodosClientes();
       }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        int linha = clientejTable.getSelectedRow();
       if (linha>=0){
           ClienteController clienteController = new ClienteController();
           listaCliente.get(linha).setTipo("PJ");
           clienteController.salvarCliente(listaCliente.get(linha));
           carregarTodosClientes();
       }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        int linha = clientejTable.getSelectedRow();
       if (linha>=0){
           ClienteController clienteController = new ClienteController();
           listaCliente.get(linha).setTipo("CD");
           clienteController.salvarCliente(listaCliente.get(linha));
           carregarTodosClientes();
       }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        String doc = JOptionPane.showInputDialog("Informe CNPJ / CPF com pontos");
        ClienteController clienteController = new ClienteController();
        Cliente clienteCPF = clienteController.consultarDocFederal(doc);
        this.listaCliente.removeAll(listaCliente);
        if (clienteCPF!=null){
            this.listaCliente.add(clienteCPF);
        }
        setModelCliente();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void codigojTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigojTextFieldKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (codigojTextField.getText().length()>0){
                carregarConsultaClienteId(Integer.parseInt(codigojTextField.getText()));
            }
        }
    }//GEN-LAST:event_codigojTextFieldKeyReleased

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        if (usuarioLogado.getAcesso().getLiberarCliente()==1){
            int linha = clientejTable.getSelectedRow();
            if (linha>=0){
                ClienteController clienteController = new ClienteController();
                Cliente cliente = clienteController.consultarClienteId(listaCliente.get(linha).getIdcliente());
                if (cliente!=null){
                    cliente.setSituacaoTemp(cliente.getSituacao());
                    cliente.setSituacao("TEMP");
                    clienteController.salvarCliente(cliente);
                }
            }
        }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed
    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarjButton;
    private javax.swing.JPanel AssociadosjPanel;
    private javax.swing.JToolBar BarradeTarefasjToolBar;
    private javax.swing.JButton EditarjButton;
    private javax.swing.JButton ExcluirjButton;
    private javax.swing.JButton FecharrjButton;
    private javax.swing.JLabel NomedoAssociadojLabel;
    private javax.swing.JLabel NomedoAssociadojLabel1;
    private javax.swing.JToolBar.Separator SeparadordeTarefasjSeparator;
    private javax.swing.JButton autorizadojButton;
    private javax.swing.JTable clientejTable;
    private javax.swing.JTextField codigojTextField;
    private javax.swing.JButton documentosjButton;
    private javax.swing.JButton enderecoEntregajButton;
    private javax.swing.JButton historicojButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomejTextField;
    private javax.swing.JButton visualizarjButton;
    // End of variables declaration//GEN-END:variables
    
    private void carregarConsultaClienteNome(String nome){
        ClienteController clienteController = new ClienteController();
        listaCliente = clienteController.consultarClienteNome(nome);
        setModelCliente();
    }
    
    public void carregarConsultaClienteId(int idCliente){
        ClienteController clienteController = new ClienteController();
        Cliente cliente = new Cliente();
        cliente = clienteController.consultarClienteId(idCliente);
        listaCliente = new ArrayList<Cliente>();
        if (cliente!=null){
            listaCliente.add(cliente);
        }else {
            listaCliente = new ArrayList<Cliente>();
        }
        setModelCliente();
    }
    
    public void carregarTodosClientes(){
        ClienteController clienteController = new ClienteController();
        listaCliente = clienteController.consultarCliente();
        setModelCliente();
    }
    
    public void carregarClientesTipoCadastro(int operacao){
        ClienteController clienteController = new ClienteController();
        listaCliente = clienteController.consultarClienteTipoCadastro(operacao);
        setModelCliente();
    }
    
    public void setModelCliente(){
        this.rendererCor = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {
                    Component comp = super.getTableCellRendererComponent(table, value,
                            isSelected, hasFocus, row, column);   
                        if (listaCliente.get(row).getOperacao()==1){
                            comp.setBackground(Color.red);
                        }else {
                            if (listaCliente.get(row).getOperacao()==2){
                                comp.setBackground(Color.blue);
                            }else {
                                comp.setBackground(Color.white);
                            }
                        }
                    return comp;
                }
        };
        if (listaCliente!=null){
            modelCliente = new ConsultaClienteTableModel(listaCliente);
        }else modelCliente = new ConsultaClienteTableModel(new ArrayList<Cliente>());
        clientejTable.setModel(modelCliente);
        clientejTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        clientejTable.getColumnModel().getColumn(1).setPreferredWidth(250);
        clientejTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        clientejTable.getColumnModel().getColumn(3).setPreferredWidth(40);
        clientejTable.getColumnModel().getColumn(4).setPreferredWidth(40);
        clientejTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        clientejTable.getColumnModel().getColumn(6).setPreferredWidth(20);
        clientejTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        clientejTable.repaint();
    }
    
    public void imprimirFichaCadastral(Cliente cliente){
        if (cliente.getOperacao() == 10) {
            String url = null;
            if (cliente.getTipo().equalsIgnoreCase("PF")) {
                url = ("telas/Cliente/Relatorios/clientePFConta.jasper");
            } else if (cliente.getTipo().equalsIgnoreCase("PJ")) {
                url = ("telas/Cliente/Relatorios/clientePJConta.jasper");
            } else if (cliente.getTipo().equalsIgnoreCase("CD")) {
                url = ("telas/Cliente/Relatorios/clienteCondConta.jasper");
            }
            if (url != null) {
                Map parameters = new HashMap();
                try {
                    parameters.put("nomeFantasia", this.config.getEmpresa().getNomeFantasia());
                    parameters.put("RazaoSocial", this.config.getEmpresa().getRazaoSocial());
                    parameters.put("idcliente", cliente.getIdcliente());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "NÃ£o foi possÃ­vel gerar o relatÃ³rio " + ex);
                    ex.printStackTrace();
                }
                new relatoriosJasper(url, parameters);
            }else {
                JOptionPane.showMessageDialog(rootPane, "NÃ£o Ã© possivel gerar relatÃ³rio.Verifique tipo de Cliente");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Cliente nÃ£o compra a Prazo");
        }
    }
    
    
    public void converterCadastroCliente(Cliente cliente){
        if (cliente.getOperacao()<10){
            if (cliente.getOperacao()==1){
                cliente.setOperacao(10);
                new FrmCadastrarClientePF(cliente, this, 10);
            }
        }else {
            JOptionPane.showMessageDialog(rootPane, "Cliente jÃ¡ esta cadastrado venda prazo");
        }
    }

    public void setMunicipio(Municipios municipios) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void resetMunicipio() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}

